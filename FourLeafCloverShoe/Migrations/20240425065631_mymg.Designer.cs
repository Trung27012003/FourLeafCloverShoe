// <auto-generated />
using System;
using FourLeafCloverShoe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FourLeafCloverShoe.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240425065631_mymg")]
    partial class mymg
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("ProvinceID")
                        .HasColumnType("int");

                    b.Property<string>("ProvinceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("WardCode")
                        .HasColumnType("int");

                    b.Property<string>("WardName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4cca626-aabc-4182-b03a-7c42971f8a1f"),
                            Name = "Nike"
                        },
                        new
                        {
                            Id = new Guid("67a75b4b-f8e1-4890-8126-957decfe9308"),
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = new Guid("4f3b3adb-a4c2-4302-9ae2-2acf92a05abb"),
                            Name = "Reebok"
                        },
                        new
                        {
                            Id = new Guid("7560db52-aa83-4fe1-806f-5a5c1338780b"),
                            Name = "Puma"
                        },
                        new
                        {
                            Id = new Guid("f3bd16b9-bdb3-4c7a-a655-01d22e9f6725"),
                            Name = "New Balance "
                        },
                        new
                        {
                            Id = new Guid("64131fd1-a937-4ce3-9558-98c1fdcd3b0c"),
                            Name = "Vans"
                        },
                        new
                        {
                            Id = new Guid("485b74cb-fc55-4079-9ae4-ada60ed68511"),
                            Name = "Converse"
                        },
                        new
                        {
                            Id = new Guid("f1d3e0fe-3bb2-4bb4-bfd6-8c2ee679e7ea"),
                            Name = "Asics"
                        },
                        new
                        {
                            Id = new Guid("6bc8be94-cdcc-46a1-aeb1-7da9c1f9be42"),
                            Name = "Skechers"
                        },
                        new
                        {
                            Id = new Guid("4e42b83f-65d6-4977-9d22-5e32be57ad77"),
                            Name = "Timberland"
                        },
                        new
                        {
                            Id = new Guid("5aded20e-93f5-4711-b6ed-e08f6716256e"),
                            Name = "Dr. Martens"
                        },
                        new
                        {
                            Id = new Guid("223a2f01-a51d-4b9c-98fc-e8684ce69659"),
                            Name = "Clarks"
                        },
                        new
                        {
                            Id = new Guid("a4df1390-603b-4397-8b95-cdf3e28396cb"),
                            Name = "Brooks"
                        },
                        new
                        {
                            Id = new Guid("80e4d398-2876-4e14-9079-eda5af3d2f1b"),
                            Name = "Under Armour"
                        },
                        new
                        {
                            Id = new Guid("ce7cd803-8f16-4080-b99a-e557a3374ab3"),
                            Name = "Fila"
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6291a8c4-ba90-4ff2-b18f-40b9eddea9c7"),
                            Name = "Sneakers "
                        },
                        new
                        {
                            Id = new Guid("75a170f6-a795-4ff2-b270-a8a9a7caad47"),
                            Name = "Boots  "
                        },
                        new
                        {
                            Id = new Guid("cd43e2ae-033a-4bf6-a575-8df1807e44c1"),
                            Name = "Sandals  "
                        },
                        new
                        {
                            Id = new Guid("d81bdb68-446c-451d-bb74-b9dcdd5fca18"),
                            Name = "Loafers  "
                        },
                        new
                        {
                            Id = new Guid("d15e8deb-fb92-4c75-aa05-178cbd69e0e9"),
                            Name = "Slippers  "
                        },
                        new
                        {
                            Id = new Guid("4eef6575-ee5b-4b02-a002-42989e068e9a"),
                            Name = "Dress shoes "
                        },
                        new
                        {
                            Id = new Guid("e42a6a16-4d00-4ab1-b181-d9cdc83614d9"),
                            Name = "Athletic shoes "
                        },
                        new
                        {
                            Id = new Guid("b35f4ec5-df4a-49d9-a071-7054bf7d344f"),
                            Name = "Espadrilles"
                        },
                        new
                        {
                            Id = new Guid("a446b995-b622-4784-8cfe-33d8780b5520"),
                            Name = "High heels"
                        },
                        new
                        {
                            Id = new Guid("881004e1-b125-425e-96be-c83a7bc4e98e"),
                            Name = "Flats"
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CoinsUsed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ShippingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalAmout")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("VoucherValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TittleImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PriceSale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductImages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Ranks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoinsMax")
                        .HasColumnType("int");

                    b.Property<int?>("PointsMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ranks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fa0118d-b530-421f-878e-ce4d54bfc6ab"),
                            Name = "Bạc",
                            PoinsMax = 1000000,
                            PointsMin = 0
                        },
                        new
                        {
                            Id = new Guid("06f2b0d0-3e91-4619-9754-2e7110bf27d0"),
                            Name = "Vàng",
                            PoinsMax = 3000000,
                            PointsMin = 1000001
                        },
                        new
                        {
                            Id = new Guid("0845ecd2-018e-41e6-a3dc-f1b38baffd15"),
                            Name = "Kim Cương",
                            PoinsMax = 10000000,
                            PointsMin = 3000001
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b938595-5c06-451b-8041-2cf3ffba24f5"),
                            Name = "38"
                        },
                        new
                        {
                            Id = new Guid("37cc93b1-a92c-4924-b5dc-6ced739e7292"),
                            Name = "39"
                        },
                        new
                        {
                            Id = new Guid("c63f2678-347b-4218-a88f-800459f6955d"),
                            Name = "40"
                        },
                        new
                        {
                            Id = new Guid("c0aa67e6-d2e2-458f-b31f-899dde5238b9"),
                            Name = "41"
                        },
                        new
                        {
                            Id = new Guid("7aa08460-bd39-4e67-94e3-b21392418a80"),
                            Name = "42"
                        },
                        new
                        {
                            Id = new Guid("ca9151cd-9798-44f0-8154-b78b0aa4f2f0"),
                            Name = "43"
                        },
                        new
                        {
                            Id = new Guid("a066d254-57a4-4a15-a192-b9c324329637"),
                            Name = "44"
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("Coins")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RankId");

                    b.ToTable("Users", "security");

                    b.HasData(
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4cda4a7c-8f17-4d76-a854-a92892dd4ec8",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedUserName = "GUEST",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            RankId = new Guid("2fa0118d-b530-421f-878e-ce4d54bfc6ab"),
                            SecurityStamp = "7a5aa27b-0422-4a19-a858-6d74632e023c",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.UserVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaximumOrderValue")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumOrderValue")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VoucherType")
                        .HasColumnType("int");

                    b.Property<decimal?>("VoucherValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "security");

                    b.HasData(
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE1D54BFC6AB",
                            ConcurrencyStamp = "aa9dea60-37ea-444e-9ac6-4eef499b6c67",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE2D54BFC6AB",
                            ConcurrencyStamp = "0942dbaf-0d4e-4466-b83f-140c6dfc846d",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE3D54BFC6AB",
                            ConcurrencyStamp = "718d410a-30fc-4f2f-878c-55bab8b1086c",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        },
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            ConcurrencyStamp = "64cb4b3f-15dd-48fc-a8d1-17d46cd402fd",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "security");

                    b.HasData(
                        new
                        {
                            UserId = "2FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            RoleId = "2FA6148D-B530-421F-878E-CE4D54BFC6AB"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "security");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Address", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany("Address")
                        .HasForeignKey("UserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Cart", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.CartItem", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.ProductDetail", "ProductDetails")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductDetailId");

                    b.Navigation("Cart");

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Order", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.Voucher", "Vouchers")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId");

                    b.Navigation("Users");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.OrderItem", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Order", "Orders")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.ProductDetail", "ProductDetails")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductDetailId");

                    b.Navigation("Orders");

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Post", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Product", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Brand", "Brands")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.Category", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Brands");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductDetail", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Product", "Products")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourLeafCloverShoe.Share.Models.Size", "Size")
                        .WithMany("ProductDetails")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductImages", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Product", "Products")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Rate", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.OrderItem", "OrderItems")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.User", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Ranks", "Ranks")
                        .WithMany("Users")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.UserVoucher", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("UserId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.Voucher", "Vouchers")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId");

                    b.Navigation("Users");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourLeafCloverShoe.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Product", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductDetail", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Ranks", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Size", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("VoucherUsers");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Voucher", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
