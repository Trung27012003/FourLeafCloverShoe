// <auto-generated />
using System;
using FourLeafCloverShoe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FourLeafCloverShoe.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240418041835_mgd")]
    partial class mgd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Wards")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d78870bf-706a-4a41-9afe-66318f1dbe55"),
                            Name = "Nike"
                        },
                        new
                        {
                            Id = new Guid("def90f4b-87e0-4715-96d7-d371e7d34329"),
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = new Guid("ec58f5d7-bd77-44a9-8914-d8d96212da70"),
                            Name = "Reebok"
                        },
                        new
                        {
                            Id = new Guid("c4e0940f-716a-4a72-8230-5e4dfae33333"),
                            Name = "Puma"
                        },
                        new
                        {
                            Id = new Guid("4fb63acf-6921-4271-bd3b-cd5ce1a8a7b0"),
                            Name = "New Balance "
                        },
                        new
                        {
                            Id = new Guid("f6ffd28b-e173-4801-b5ba-a65137354153"),
                            Name = "Vans"
                        },
                        new
                        {
                            Id = new Guid("6e179d9b-01ac-4a2b-a167-7aa0a38d3678"),
                            Name = "Converse"
                        },
                        new
                        {
                            Id = new Guid("566e91c5-2144-4f47-aa4c-931d22b00c0b"),
                            Name = "Asics"
                        },
                        new
                        {
                            Id = new Guid("62882dab-5b40-4223-8b1f-45d4b80ab500"),
                            Name = "Skechers"
                        },
                        new
                        {
                            Id = new Guid("199b4107-db4b-4755-8d1c-f025b2156f70"),
                            Name = "Timberland"
                        },
                        new
                        {
                            Id = new Guid("2ad5a9ad-c271-409d-ab88-658c86630c83"),
                            Name = "Dr. Martens"
                        },
                        new
                        {
                            Id = new Guid("464a812c-84be-492e-9d94-ddb8c7b80053"),
                            Name = "Clarks"
                        },
                        new
                        {
                            Id = new Guid("8c39c8f3-e56d-42c0-86fc-2a9bea209b31"),
                            Name = "Brooks"
                        },
                        new
                        {
                            Id = new Guid("62adb64a-f549-481c-b0ad-504503cc76dc"),
                            Name = "Under Armour"
                        },
                        new
                        {
                            Id = new Guid("7deaa3f1-9c9e-4ae8-8f19-3d0e2b7cef33"),
                            Name = "Fila"
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a46e84cb-82aa-49f5-b41d-b5a308375367"),
                            Name = "Sneakers "
                        },
                        new
                        {
                            Id = new Guid("14296ebc-f6ff-48d7-92d0-038f70860384"),
                            Name = "Boots  "
                        },
                        new
                        {
                            Id = new Guid("b184c113-9325-439c-9043-9b2d128c37a0"),
                            Name = "Sandals  "
                        },
                        new
                        {
                            Id = new Guid("2458bdb5-b12e-4570-9538-971053381472"),
                            Name = "Loafers  "
                        },
                        new
                        {
                            Id = new Guid("bb22db6a-a3c9-4d73-bbe7-5b85eb1aab47"),
                            Name = "Slippers  "
                        },
                        new
                        {
                            Id = new Guid("e0bf3180-1282-4400-9a86-28d6293dd9c4"),
                            Name = "Dress shoes "
                        },
                        new
                        {
                            Id = new Guid("88c532ff-1a2b-4f05-85f4-3c406392c7cc"),
                            Name = "Athletic shoes "
                        },
                        new
                        {
                            Id = new Guid("639f5821-769a-4754-9f0c-74c8b8b6a9f0"),
                            Name = "Espadrilles"
                        },
                        new
                        {
                            Id = new Guid("b107ab60-0f3b-4322-8759-2eb22b6ee0ae"),
                            Name = "High heels"
                        },
                        new
                        {
                            Id = new Guid("22dfdee0-e07e-4119-b0b6-1ebf43825eab"),
                            Name = "Flats"
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ShippingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalAmout")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("VoucherValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TittleImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PriceSale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductImages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Ranks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoinsMax")
                        .HasColumnType("int");

                    b.Property<int?>("PointsMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ranks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fa0118d-b530-421f-878e-ce4d54bfc6ab"),
                            Name = "Bạc",
                            PoinsMax = 1000000,
                            PointsMin = 0
                        },
                        new
                        {
                            Id = new Guid("6e8030dc-33b5-4322-a51c-793f6207ef43"),
                            Name = "Vàng",
                            PoinsMax = 3000000,
                            PointsMin = 1000001
                        },
                        new
                        {
                            Id = new Guid("8c22cd91-62be-4b3e-b9ea-c3f4d62c2f6a"),
                            Name = "Kim Cương",
                            PoinsMax = 10000000,
                            PointsMin = 3000001
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c48130ae-61a1-4e64-a2d3-d8ca15307ca1"),
                            Name = "38"
                        },
                        new
                        {
                            Id = new Guid("4724aee5-dfe2-46f7-a632-5a9aac7b9268"),
                            Name = "39"
                        },
                        new
                        {
                            Id = new Guid("fe7c0ed3-1cc0-4680-b7ad-79460c8db41e"),
                            Name = "40"
                        },
                        new
                        {
                            Id = new Guid("eede1b39-01b4-49a5-9dce-36b82561a8bc"),
                            Name = "41"
                        },
                        new
                        {
                            Id = new Guid("b7d2df4e-9057-4233-9bad-f5a2955f23ca"),
                            Name = "42"
                        },
                        new
                        {
                            Id = new Guid("89c3ceb8-fc1b-484b-841c-3d4bfc1d9f2d"),
                            Name = "43"
                        },
                        new
                        {
                            Id = new Guid("0a4d641d-ad9d-4202-98a0-7f89648300c8"),
                            Name = "44"
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Coins")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RankId");

                    b.ToTable("Users", "security");

                    b.HasData(
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33351ab5-20ce-44ba-9e58-80d716657a92",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedUserName = "GUEST",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            RankId = new Guid("2fa0118d-b530-421f-878e-ce4d54bfc6ab"),
                            SecurityStamp = "10bf50c0-24bf-42b5-9b38-c71c87fa0a53",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.UserVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaximumOrderValue")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumOrderValue")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VoucherType")
                        .HasColumnType("int");

                    b.Property<decimal?>("VoucherValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "security");

                    b.HasData(
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE1D54BFC6AB",
                            ConcurrencyStamp = "edd8b9b4-88fd-4bb7-93f6-34a9efa2bdbd",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE2D54BFC6AB",
                            ConcurrencyStamp = "ae80fce2-e10e-4508-90c4-d2d60b7db55a",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE3D54BFC6AB",
                            ConcurrencyStamp = "682e9626-d958-49be-b472-4543404b644c",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        },
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            ConcurrencyStamp = "95155b7e-6f6b-4e30-a410-d2ffa43a5ba5",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "security");

                    b.HasData(
                        new
                        {
                            UserId = "2FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            RoleId = "2FA6148D-B530-421F-878E-CE4D54BFC6AB"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "security");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Address", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany("Address")
                        .HasForeignKey("UserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Cart", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.CartItem", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.ProductDetail", "ProductDetails")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductDetailId");

                    b.Navigation("Cart");

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Order", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.Voucher", "Vouchers")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId");

                    b.Navigation("Users");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.OrderItem", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Order", "Orders")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourLeafCloverShoe.Share.Models.ProductDetail", "ProductDetails")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Post", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Product", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Brand", "Brands")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.Category", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Brands");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductDetail", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Product", "Products")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourLeafCloverShoe.Share.Models.Size", "Size")
                        .WithMany("ProductDetails")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductImages", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Product", "Products")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Rate", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.OrderItem", "OrderItems")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.User", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Ranks", "Ranks")
                        .WithMany("Users")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.UserVoucher", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("UserId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.Voucher", "Vouchers")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId");

                    b.Navigation("Users");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourLeafCloverShoe.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Product", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductDetail", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Ranks", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Size", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("VoucherUsers");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Voucher", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
